{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ContactUs from \"./components/ContactUs.vue\"; // 确保这里的路径是正确的\nimport ChatBox from \"./components/ChatBox.vue\"; // 引入你的聊天框组件\nimport RefreshButton from \"./components/RefreshButton.vue\";\nimport axios from \"axios\";\nimport WordCard from \"./components/WordCard.vue\";\nexport default {\n  components: {\n    \"contact-us\": ContactUs,\n    // 在这里注册你的组件\n    \"chat-box\": ChatBox,\n    // 注册你的聊天框组件\n    RefreshButton,\n    WordCard\n  },\n  data() {\n    return {\n      words: [],\n      currentWordIndex: 0,\n      isDefinitionVisible: false,\n      searchTerm: \"\",\n      focusLostCountdown: 0,\n      countdownInterval: null,\n      // 新增一个变量来存储倒计时的interval\n      browsedWords: [],\n      // 新增一个变量来存储已浏览的单词\n      newWords: [] // 新的一组单词\n    };\n  },\n\n  created() {\n    const word = this.$route.params.word;\n    if (word) {\n      this.jumpToWord(word);\n    }\n    axios.get(\"http://localhost:5300/random-words\").then(response => {\n      this.words = response.data;\n    }).catch(error => {\n      console.error(\"Error fetching random words:\", error);\n    });\n  },\n  methods: {\n    showDefinition() {\n      this.isDefinitionVisible = true;\n    },\n    fetchWord(word) {\n      axios.get(`http://localhost:5100/words/${word}`).then(response => {\n        console.log(response.data);\n        const index = this.words.findIndex(w => w.word === word);\n        if (index >= 0) {\n          this.words[index].definition = response.data.definition;\n          this.words[index].example = response.data.example;\n          this.words[index].example_translation = response.data.example_translation; // 新增的例句翻译\n          this.currentWordIndex = index;\n        } else {\n          this.words.push({\n            word: response.data.word,\n            definition: response.data.definition,\n            example: response.data.example,\n            example_translation: response.data.example_translation // 新增的例句翻译\n          });\n\n          this.currentWordIndex = this.words.length - 1;\n        }\n        console.log(this.words[index].word);\n        console.log(this.currentWordIndex);\n        // this.showDefinition(); // 显示搜索到的单词定义\n      }).catch(error => {\n        console.error(\"Error fetching word:\", error);\n      });\n    },\n    nextWord() {\n      const currentWord = this.words[this.currentWordIndex].word;\n      if (!this.browsedWords.includes(currentWord)) {\n        // 如果当前单词不在已浏览单词列表中，就添加到列表\n        this.browsedWords.push(currentWord);\n      }\n      this.currentWordIndex = (this.currentWordIndex + 1) % this.words.length;\n      this.isDefinitionVisible = false;\n      this.$router.push(`/words/${this.words[this.currentWordIndex].word}`);\n      this.fetchWord(this.words[this.currentWordIndex].word);\n    },\n    // ...\n\n    jumpToWord(word) {\n      const index = this.words.findIndex(w => w.word === word);\n      if (index !== -1) {\n        this.currentWordIndex = index;\n      }\n      this.$router.push(`/words/${word}`);\n      this.fetchWord(word);\n    },\n    searchWord() {\n      this.fetchWord(this.searchTerm);\n      this.showDefinition();\n    },\n    startCountdown() {\n      this.focusLostCountdown = 5;\n      this.countdownInterval = setInterval(() => {\n        if (this.focusLostCountdown > 0) {\n          this.focusLostCountdown--;\n        } else {\n          clearInterval(this.countdownInterval);\n        }\n      }, 1000);\n    },\n    stopCountdown() {\n      clearInterval(this.countdownInterval);\n      this.focusLostCountdown = 0;\n    },\n    getNewWords() {\n      axios.get(\"http://localhost:5300/random-words\").then(response => {\n        this.newWords = response.data;\n        this.words = this.newWords; // 更新单词列表\n      }).catch(error => {\n        console.error(\"Error fetching new words:\", error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["ContactUs","ChatBox","RefreshButton","axios","WordCard","components","data","words","currentWordIndex","isDefinitionVisible","searchTerm","focusLostCountdown","countdownInterval","browsedWords","newWords","created","word","$route","params","jumpToWord","get","then","response","catch","error","console","methods","showDefinition","fetchWord","log","index","findIndex","w","definition","example","example_translation","push","length","nextWord","currentWord","includes","$router","searchWord","startCountdown","setInterval","clearInterval","stopCountdown","getNewWords"],"sources":["H:\\单词学习项目\\word_study\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <!-- 添加一个头部 -->\r\n    <header>\r\n      <h1>Word Journeyman</h1>\r\n      <nav>\r\n        <a href=\"#\"></a>\r\n        <contact-us></contact-us>\r\n      </nav>\r\n    </header>\r\n\r\n    <!-- 添加侧边栏 -->\r\n    <div class=\"sidebar\">\r\n      <h2>单词探索历程</h2>\r\n      <ul>\r\n        <li v-for=\"word in browsedWords\" :key=\"word\" @click=\"jumpToWord(word)\">\r\n          {{ word }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"center-container\">\r\n      <!-- 搜索栏 -->\r\n      <div class=\"search-bar\">\r\n        <input\r\n          v-model=\"searchTerm\"\r\n          type=\"text\"\r\n          placeholder=\"搜索单词...\"\r\n          @keyup.enter=\"searchWord\"\r\n        />\r\n        <button @click=\"searchWord\">搜索</button>\r\n        <p>{{ searchMessage }}</p>\r\n        <!-- 新增一行来显示searchMessage -->\r\n      </div>\r\n      <!-- 单词卡片 -->\r\n      <div\r\n        id=\"card\"\r\n        class=\"card\"\r\n        @mouseleave=\"startCountdown\"\r\n        @mouseenter=\"stopCountdown\"\r\n      >\r\n        <!-- 卡片内容 -->\r\n        <h1>{{ words[currentWordIndex].word }}</h1>\r\n\r\n        <!-- 定义显示 -->\r\n        <p v-show=\"isDefinitionVisible\">\r\n          {{ words[currentWordIndex].definition }}\r\n        </p>\r\n        <!-- 判断例句是否为空，如果不为空则显示 -->\r\n        <p\r\n          v-show=\"\r\n            isDefinitionVisible && words[currentWordIndex].example.length > 0\r\n          \"\r\n        >\r\n          <strong>例句：</strong> {{ words[currentWordIndex].example }}\r\n        </p>\r\n        <!-- 判断例句翻译是否为空，如果不为空则显示 -->\r\n        <p\r\n          v-show=\"\r\n            isDefinitionVisible &&\r\n            words[currentWordIndex].example_translation.length > 0\r\n          \"\r\n        >\r\n          <strong>例句翻译：</strong>\r\n          {{ words[currentWordIndex].example_translation }}\r\n        </p>\r\n\r\n        <div class=\"card-buttons\">\r\n          <button\r\n            class=\"button\"\r\n            @click=\"showDefinition\"\r\n            :disabled=\"isDefinitionVisible\"\r\n          >\r\n            显示定义\r\n          </button>\r\n          <button class=\"button\" @click=\"nextWord\">下一个单词</button>\r\n        </div>\r\n\r\n        <!-- 小字提醒 -->\r\n        <p v-if=\"focusLostCountdown > 0\" class=\"countdown-message\">\r\n          焦点将在 {{ focusLostCountdown }} 秒后消失\r\n        </p>\r\n      </div>\r\n      <refresh-button\r\n        class=\"refresh-button\"\r\n        @refresh=\"getNewWords\"\r\n      ></refresh-button>\r\n\r\n      <!-- 聊天框组件 -->\r\n      <chat-box></chat-box>\r\n    </div>\r\n\r\n    <!-- 添加一个底部 -->\r\n    <footer>\r\n      <p>©2023 Word Journeyman</p>\r\n    </footer>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport ContactUs from \"./components/ContactUs.vue\"; // 确保这里的路径是正确的\r\nimport ChatBox from \"./components/ChatBox.vue\"; // 引入你的聊天框组件\r\nimport RefreshButton from \"./components/RefreshButton.vue\";\r\nimport axios from \"axios\";\r\nimport WordCard from \"./components/WordCard.vue\";\r\nexport default {\r\n  components: {\r\n    \"contact-us\": ContactUs, // 在这里注册你的组件\r\n    \"chat-box\": ChatBox, // 注册你的聊天框组件\r\n    RefreshButton,\r\n    WordCard,\r\n  },\r\n  data() {\r\n    return {\r\n      words: [],\r\n      currentWordIndex: 0,\r\n      isDefinitionVisible: false,\r\n      searchTerm: \"\",\r\n      focusLostCountdown: 0,\r\n      countdownInterval: null, // 新增一个变量来存储倒计时的interval\r\n      browsedWords: [], // 新增一个变量来存储已浏览的单词\r\n      newWords: [], // 新的一组单词\r\n    };\r\n  },\r\n  created() {\r\n    const word = this.$route.params.word;\r\n    if (word) {\r\n      this.jumpToWord(word);\r\n    }\r\n    axios\r\n      .get(\"http://localhost:5300/random-words\")\r\n      .then((response) => {\r\n        this.words = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching random words:\", error);\r\n      });\r\n  },\r\n  methods: {\r\n    showDefinition() {\r\n      this.isDefinitionVisible = true;\r\n    },\r\n    fetchWord(word) {\r\n      axios\r\n        .get(`http://localhost:5100/words/${word}`)\r\n        .then((response) => {\r\n          console.log(response.data);\r\n          const index = this.words.findIndex((w) => w.word === word);\r\n          if (index >= 0) {\r\n            this.words[index].definition = response.data.definition;\r\n            this.words[index].example = response.data.example;\r\n            this.words[index].example_translation =\r\n              response.data.example_translation; // 新增的例句翻译\r\n            this.currentWordIndex = index;\r\n          } else {\r\n            this.words.push({\r\n              word: response.data.word,\r\n              definition: response.data.definition,\r\n              example: response.data.example,\r\n              example_translation: response.data.example_translation, // 新增的例句翻译\r\n            });\r\n            this.currentWordIndex = this.words.length - 1;\r\n          }\r\n\r\n          console.log(this.words[index].word);\r\n          console.log(this.currentWordIndex);\r\n          // this.showDefinition(); // 显示搜索到的单词定义\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching word:\", error);\r\n        });\r\n    },\r\n\r\n    nextWord() {\r\n      const currentWord = this.words[this.currentWordIndex].word;\r\n      if (!this.browsedWords.includes(currentWord)) {\r\n        // 如果当前单词不在已浏览单词列表中，就添加到列表\r\n        this.browsedWords.push(currentWord);\r\n      }\r\n      this.currentWordIndex = (this.currentWordIndex + 1) % this.words.length;\r\n      this.isDefinitionVisible = false;\r\n      this.$router.push(`/words/${this.words[this.currentWordIndex].word}`);\r\n      this.fetchWord(this.words[this.currentWordIndex].word);\r\n    },\r\n\r\n    // ...\r\n\r\n    jumpToWord(word) {\r\n      const index = this.words.findIndex((w) => w.word === word);\r\n      if (index !== -1) {\r\n        this.currentWordIndex = index;\r\n      }\r\n      this.$router.push(`/words/${word}`);\r\n      this.fetchWord(word);\r\n    },\r\n\r\n    searchWord() {\r\n      this.fetchWord(this.searchTerm);\r\n      this.showDefinition();\r\n    },\r\n    startCountdown() {\r\n      this.focusLostCountdown = 5;\r\n      this.countdownInterval = setInterval(() => {\r\n        if (this.focusLostCountdown > 0) {\r\n          this.focusLostCountdown--;\r\n        } else {\r\n          clearInterval(this.countdownInterval);\r\n        }\r\n      }, 1000);\r\n    },\r\n    stopCountdown() {\r\n      clearInterval(this.countdownInterval);\r\n      this.focusLostCountdown = 0;\r\n    },\r\n\r\n    getNewWords() {\r\n      axios\r\n        .get(\"http://localhost:5300/random-words\")\r\n        .then((response) => {\r\n          this.newWords = response.data;\r\n          this.words = this.newWords; // 更新单词列表\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching new words:\", error);\r\n        });\r\n    },\r\n  },\r\n};\r\n\r\n</script>\r\n\r\n\r\n<style scoped>\r\n@import url(\"../css/styles.css\");\r\n</style>"],"mappings":";AAqGA,OAAOA,SAAQ,MAAO,4BAA4B,EAAE;AACpD,OAAOC,OAAM,MAAO,0BAA0B,EAAE;AAChD,OAAOC,aAAY,MAAO,gCAAgC;AAC1D,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,QAAO,MAAO,2BAA2B;AAChD,eAAe;EACbC,UAAU,EAAE;IACV,YAAY,EAAEL,SAAS;IAAE;IACzB,UAAU,EAAEC,OAAO;IAAE;IACrBC,aAAa;IACbE;EACF,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,gBAAgB,EAAE,CAAC;MACnBC,mBAAmB,EAAE,KAAK;MAC1BC,UAAU,EAAE,EAAE;MACdC,kBAAkB,EAAE,CAAC;MACrBC,iBAAiB,EAAE,IAAI;MAAE;MACzBC,YAAY,EAAE,EAAE;MAAE;MAClBC,QAAQ,EAAE,EAAE,CAAE;IAChB,CAAC;EACH,CAAC;;EACDC,OAAOA,CAAA,EAAG;IACR,MAAMC,IAAG,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,IAAI;IACpC,IAAIA,IAAI,EAAE;MACR,IAAI,CAACG,UAAU,CAACH,IAAI,CAAC;IACvB;IACAb,KAAI,CACDiB,GAAG,CAAC,oCAAoC,EACxCC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACf,KAAI,GAAIe,QAAQ,CAAChB,IAAI;IAC5B,CAAC,EACAiB,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD,CAAC,CAAC;EACN,CAAC;EACDE,OAAO,EAAE;IACPC,cAAcA,CAAA,EAAG;MACf,IAAI,CAAClB,mBAAkB,GAAI,IAAI;IACjC,CAAC;IACDmB,SAASA,CAACZ,IAAI,EAAE;MACdb,KAAI,CACDiB,GAAG,CAAE,+BAA8BJ,IAAK,EAAC,EACzCK,IAAI,CAAEC,QAAQ,IAAK;QAClBG,OAAO,CAACI,GAAG,CAACP,QAAQ,CAAChB,IAAI,CAAC;QAC1B,MAAMwB,KAAI,GAAI,IAAI,CAACvB,KAAK,CAACwB,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAAChB,IAAG,KAAMA,IAAI,CAAC;QAC1D,IAAIc,KAAI,IAAK,CAAC,EAAE;UACd,IAAI,CAACvB,KAAK,CAACuB,KAAK,CAAC,CAACG,UAAS,GAAIX,QAAQ,CAAChB,IAAI,CAAC2B,UAAU;UACvD,IAAI,CAAC1B,KAAK,CAACuB,KAAK,CAAC,CAACI,OAAM,GAAIZ,QAAQ,CAAChB,IAAI,CAAC4B,OAAO;UACjD,IAAI,CAAC3B,KAAK,CAACuB,KAAK,CAAC,CAACK,mBAAkB,GAClCb,QAAQ,CAAChB,IAAI,CAAC6B,mBAAmB,EAAE;UACrC,IAAI,CAAC3B,gBAAe,GAAIsB,KAAK;QAC/B,OAAO;UACL,IAAI,CAACvB,KAAK,CAAC6B,IAAI,CAAC;YACdpB,IAAI,EAAEM,QAAQ,CAAChB,IAAI,CAACU,IAAI;YACxBiB,UAAU,EAAEX,QAAQ,CAAChB,IAAI,CAAC2B,UAAU;YACpCC,OAAO,EAAEZ,QAAQ,CAAChB,IAAI,CAAC4B,OAAO;YAC9BC,mBAAmB,EAAEb,QAAQ,CAAChB,IAAI,CAAC6B,mBAAmB,CAAE;UAC1D,CAAC,CAAC;;UACF,IAAI,CAAC3B,gBAAe,GAAI,IAAI,CAACD,KAAK,CAAC8B,MAAK,GAAI,CAAC;QAC/C;QAEAZ,OAAO,CAACI,GAAG,CAAC,IAAI,CAACtB,KAAK,CAACuB,KAAK,CAAC,CAACd,IAAI,CAAC;QACnCS,OAAO,CAACI,GAAG,CAAC,IAAI,CAACrB,gBAAgB,CAAC;QAClC;MACF,CAAC,EACAe,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CAAC;IACN,CAAC;IAEDc,QAAQA,CAAA,EAAG;MACT,MAAMC,WAAU,GAAI,IAAI,CAAChC,KAAK,CAAC,IAAI,CAACC,gBAAgB,CAAC,CAACQ,IAAI;MAC1D,IAAI,CAAC,IAAI,CAACH,YAAY,CAAC2B,QAAQ,CAACD,WAAW,CAAC,EAAE;QAC5C;QACA,IAAI,CAAC1B,YAAY,CAACuB,IAAI,CAACG,WAAW,CAAC;MACrC;MACA,IAAI,CAAC/B,gBAAe,GAAI,CAAC,IAAI,CAACA,gBAAe,GAAI,CAAC,IAAI,IAAI,CAACD,KAAK,CAAC8B,MAAM;MACvE,IAAI,CAAC5B,mBAAkB,GAAI,KAAK;MAChC,IAAI,CAACgC,OAAO,CAACL,IAAI,CAAE,UAAS,IAAI,CAAC7B,KAAK,CAAC,IAAI,CAACC,gBAAgB,CAAC,CAACQ,IAAK,EAAC,CAAC;MACrE,IAAI,CAACY,SAAS,CAAC,IAAI,CAACrB,KAAK,CAAC,IAAI,CAACC,gBAAgB,CAAC,CAACQ,IAAI,CAAC;IACxD,CAAC;IAED;;IAEAG,UAAUA,CAACH,IAAI,EAAE;MACf,MAAMc,KAAI,GAAI,IAAI,CAACvB,KAAK,CAACwB,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAAChB,IAAG,KAAMA,IAAI,CAAC;MAC1D,IAAIc,KAAI,KAAM,CAAC,CAAC,EAAE;QAChB,IAAI,CAACtB,gBAAe,GAAIsB,KAAK;MAC/B;MACA,IAAI,CAACW,OAAO,CAACL,IAAI,CAAE,UAASpB,IAAK,EAAC,CAAC;MACnC,IAAI,CAACY,SAAS,CAACZ,IAAI,CAAC;IACtB,CAAC;IAED0B,UAAUA,CAAA,EAAG;MACX,IAAI,CAACd,SAAS,CAAC,IAAI,CAAClB,UAAU,CAAC;MAC/B,IAAI,CAACiB,cAAc,CAAC,CAAC;IACvB,CAAC;IACDgB,cAAcA,CAAA,EAAG;MACf,IAAI,CAAChC,kBAAiB,GAAI,CAAC;MAC3B,IAAI,CAACC,iBAAgB,GAAIgC,WAAW,CAAC,MAAM;QACzC,IAAI,IAAI,CAACjC,kBAAiB,GAAI,CAAC,EAAE;UAC/B,IAAI,CAACA,kBAAkB,EAAE;QAC3B,OAAO;UACLkC,aAAa,CAAC,IAAI,CAACjC,iBAAiB,CAAC;QACvC;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;IACDkC,aAAaA,CAAA,EAAG;MACdD,aAAa,CAAC,IAAI,CAACjC,iBAAiB,CAAC;MACrC,IAAI,CAACD,kBAAiB,GAAI,CAAC;IAC7B,CAAC;IAEDoC,WAAWA,CAAA,EAAG;MACZ5C,KAAI,CACDiB,GAAG,CAAC,oCAAoC,EACxCC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACR,QAAO,GAAIQ,QAAQ,CAAChB,IAAI;QAC7B,IAAI,CAACC,KAAI,GAAI,IAAI,CAACO,QAAQ,EAAE;MAC9B,CAAC,EACAS,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD,CAAC,CAAC;IACN;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
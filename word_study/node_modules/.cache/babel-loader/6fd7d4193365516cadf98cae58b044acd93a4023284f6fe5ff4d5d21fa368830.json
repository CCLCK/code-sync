{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, resolveComponent as _resolveComponent, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-0fa2e3d3\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"chat-box-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"chat-box\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"Word Usage\", -1 /* HOISTED */));\nconst _hoisted_4 = {\n  class: \"chat-content\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"user-message\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"bot-message\"\n};\nconst _hoisted_7 = {\n  class: \"chat-actions\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_font_awesome_icon = _resolveComponent(\"font-awesome-icon\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.isChatOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n    class: \"chat-header\",\n    onClick: _cache[0] || (_cache[0] = $event => $data.isChatOpen = !$data.isChatOpen)\n  }, [_hoisted_3, _createCommentVNode(\" Chat box header \")]), _createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" This part will show the chat history \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"message\"\n    }, [message.sender === 'user' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, _toDisplayString(message.text), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _toDisplayString(message.text), 1 /* TEXT */))]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" User input field \"), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.userInput = $event),\n    placeholder: \"Type your message...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.userInput]])]), _createCommentVNode(\" Send button \"), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"Send\")])])) : (_openBlock(), _createElementBlock(\"div\", {\n    key: 1,\n    class: \"chat-icon\",\n    onClick: _cache[3] || (_cache[3] = $event => $data.isChatOpen = !$data.isChatOpen)\n  }, [_createVNode(_component_font_awesome_icon, {\n    icon: \"comments\"\n  })]))]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","$data","isChatOpen","_hoisted_2","onClick","_cache","$event","_hoisted_3","_createCommentVNode","_hoisted_4","_Fragment","_renderList","messages","message","index","key","sender","_hoisted_5","_toDisplayString","text","_hoisted_6","userInput","placeholder","_hoisted_7","args","$options","sendMessage","_createVNode","_component_font_awesome_icon","icon"],"sources":["H:\\单词学习项目\\word_study\\src\\components\\ChatBox.vue"],"sourcesContent":["<template>\r\n    <div class=\"chat-box-container\">\r\n      <div v-if=\"isChatOpen\" class=\"chat-box\">\r\n        <div class=\"chat-header\" @click=\"isChatOpen = !isChatOpen\">\r\n          <h3>Word Usage</h3> <!-- Chat box header -->\r\n        </div>\r\n        <div class=\"chat-content\">\r\n          <!-- This part will show the chat history -->\r\n          <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"message\">\r\n            <div v-if=\"message.sender === 'user'\" class=\"user-message\">\r\n              {{ message.text }}\r\n            </div>\r\n            <div v-else class=\"bot-message\">\r\n              {{ message.text }}\r\n            </div>\r\n          </div>\r\n          <!-- User input field -->\r\n          <textarea v-model=\"userInput\" placeholder=\"Type your message...\" />\r\n        </div>\r\n        <!-- Send button -->\r\n        <div class=\"chat-actions\">\r\n          <button @click=\"sendMessage\">Send</button>\r\n        </div>\r\n      </div>\r\n      <div v-else class=\"chat-icon\" @click=\"isChatOpen = !isChatOpen\">\r\n        <font-awesome-icon icon=\"comments\" />\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        userInput: \"\", // User input field data\r\n        isChatOpen: false, // Controls whether the chat box is open or not\r\n        messages: [] // Stores chat history\r\n      };\r\n    },\r\n    methods: {\r\n      sendMessage() {\r\n        // Append user's input to chat history\r\n        this.messages.push({ sender: 'user', text: this.userInput });\r\n        // Clear user input field\r\n        this.userInput = \"\";\r\n        // TODO: You should send the user's input to your chatbot and append the response to chat history\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .chat-box-container {\r\n    position: fixed; // Fixed positioning to make it stay at the same place even when scrolling\r\n    right: 20px; // 20 pixels from the right side of the screen\r\n    bottom: 20px; // 20 pixels from the bottom of the screen\r\n    z-index: 1000; // Z-index to make sure it appears on top of other elements\r\n  }\r\n  \r\n  .chat-box {\r\n    width: 400px; // Width of the chat box\r\n    height: 300px; // Height of the chat box\r\n    background-color: white; // Background color of the chat box\r\n    border: 1px solid #ccc; // Border around the chat box\r\n    border-radius: 5px; // Rounded corners of the chat box\r\n    padding: 10px; // Padding inside the chat box\r\n  }\r\n  \r\n  .chat-header {\r\n    margin-bottom: 10px; // Space between the header and the chat content\r\n  }\r\n  \r\n  .chat-content {\r\n    height: 210px; // Height of the chat content\r\n    overflow-y: auto; // Make the chat content scrollable when it overflows\r\n  }\r\n  \r\n  textarea {\r\n    width: 100%; // Full width to match the chat content\r\n    height: 50px; // Set a fixed height for the textarea\r\n    margin-bottom: 10px; // Space between the textarea and the send button\r\n  }\r\n  \r\n  .chat-actions {\r\n    display: flex```vue\r\n  <template>\r\n    <div class=\"chat-box-container\">\r\n      <div v-if=\"isChatOpen\" class=\"chat-box\">\r\n        <div class=\"chat-header\" @click=\"isChatOpen = !isChatOpen\">\r\n          <h3>Word Usage</h3> <!-- Chat box header -->\r\n        </div>\r\n        <div class=\"chat-content\">\r\n          <!-- This part will show the chat history -->\r\n          <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"message\">\r\n            <div v-if=\"message.sender === 'user'\" class=\"user-message\">\r\n              {{ message.text }}\r\n            </div>\r\n            <div v-else class=\"bot-message\">\r\n              {{ message.text }}\r\n            </div>\r\n          </div>\r\n          <!-- User input field -->\r\n          <textarea v-model=\"userInput\" placeholder=\"Type your message...\" />\r\n        </div>\r\n        <!-- Send button -->\r\n        <div class=\"chat-actions\">\r\n          <button @click=\"sendMessage\">Send</button>\r\n        </div>\r\n      </div>\r\n      <div v-else class=\"chat-icon\" @click=\"isChatOpen = !isChatOpen\">\r\n        <font-awesome-icon icon=\"comments\" />\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        userInput: \"\", // User input field data\r\n        isChatOpen: false, // Controls whether the chat box is open or not\r\n        messages: [] // Stores chat history\r\n      };\r\n    },\r\n    methods: {\r\n      sendMessage() {\r\n        // Append user's input to chat history\r\n        this.messages.push({ sender: 'user', text: this.userInput });\r\n        // Clear user input field\r\n        this.userInput = \"\";\r\n        // TODO: You should send the user's input to your chatbot and append the response to chat history\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .chat-box-container {\r\n    position: fixed; // Fixed positioning to make it stay at the same place even when scrolling\r\n    right: 20px; // 20 pixels from the right side of the screen\r\n    bottom: 20px; // 20 pixels from the bottom of the screen\r\n    z-index: 1000; // Z-index to make sure it appears on top of other elements\r\n  }\r\n  \r\n  .chat-box {\r\n    width: 400px; // Width of the chat box\r\n    height: 300px; // Height of the chat box\r\n    background-color: white; // Background color of the chat box\r\n    border: 1px solid #ccc; // Border around the chat box\r\n    border-radius: 5px; // Rounded corners of the chat box\r\n    padding: 10px; // Padding inside the chat box\r\n  }\r\n  \r\n  .chat-header {\r\n    margin-bottom: 10px; // Space between the header and the chat content\r\n  }\r\n  \r\n  .chat-content {\r\n    height: 210px; // Height of the chat content\r\n    overflow-y: auto; // Make the chat content scrollable when it overflows\r\n  }\r\n  \r\n  textarea {\r\n    width: 100%; // Full width to match the chat content\r\n    height: 50px; // Set a fixed height for the textarea\r\n    margin-bottom: 10px; // Space between the textarea and the send button\r\n  }\r\n  \r\n  .chat-actions {\r\n    display: flex; // Flex display to align items in a row\r\n    justify-content: flex-end; // Align items to the end of the container\r\n  }\r\n  </style>\r\n  "],"mappings":";;;EACSA,KAAK,EAAC;AAAoB;;;EACNA,KAAK,EAAC;;gEAEzBC,mBAAA,CAAmB,YAAf,YAAU;;EAEXD,KAAK,EAAC;AAAc;;;EAGiBA,KAAK,EAAC;;;;EAGhCA,KAAK,EAAC;;;EAQjBA,KAAK,EAAC;AAAc;;;uBAnB7BE,mBAAA,CA0BM,OA1BNC,UA0BM,GAzBOC,KAAA,CAAAC,UAAU,I,cAArBH,mBAAA,CAqBM,OArBNI,UAqBM,GApBJL,mBAAA,CAEM;IAFDD,KAAK,EAAC,aAAa;IAAEO,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEL,KAAA,CAAAC,UAAU,IAAID,KAAA,CAAAC,UAAU;MACvDK,UAAmB,EAACC,mBAAA,qBAAwB,C,GAE9CV,mBAAA,CAYM,OAZNW,UAYM,GAXJD,mBAAA,0CAA6C,G,kBAC7CT,mBAAA,CAOMW,SAAA,QAAAC,WAAA,CAP0BV,KAAA,CAAAW,QAAQ,GAA3BC,OAAO,EAAEC,KAAK;yBAA3Bf,mBAAA,CAOM;MAPqCgB,GAAG,EAAED,KAAK;MAAEjB,KAAK,EAAC;QAChDgB,OAAO,CAACG,MAAM,e,cAAzBjB,mBAAA,CAEM,OAFNkB,UAEM,EAAAC,gBAAA,CADDL,OAAO,CAACM,IAAI,qB,cAEjBpB,mBAAA,CAEM,OAFNqB,UAEM,EAAAF,gBAAA,CADDL,OAAO,CAACM,IAAI,kB;kCAGnBX,mBAAA,sBAAyB,E,gBACzBV,mBAAA,CAAmE;+DAAhDG,KAAA,CAAAoB,SAAS,GAAAf,MAAA;IAAEgB,WAAW,EAAC;iDAAvBrB,KAAA,CAAAoB,SAAS,E,KAE9Bb,mBAAA,iBAAoB,EACpBV,mBAAA,CAEM,OAFNyB,UAEM,GADJzB,mBAAA,CAA0C;IAAjCM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAmB,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,MAAI,E,sBAGrCzB,mBAAA,CAEM;;IAFMF,KAAK,EAAC,WAAW;IAAEO,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEL,KAAA,CAAAC,UAAU,IAAID,KAAA,CAAAC,UAAU;MAC5DyB,YAAA,CAAqCC,4BAAA;IAAlBC,IAAI,EAAC;EAAU,G"},"metadata":{},"sourceType":"module","externalDependencies":[]}
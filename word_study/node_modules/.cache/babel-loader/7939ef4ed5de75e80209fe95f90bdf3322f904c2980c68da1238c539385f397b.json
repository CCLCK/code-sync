{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//   import axios from 'axios';\nexport default {\n  data() {\n    return {\n      userInput: \"\",\n      isChatOpen: false,\n      messages: []\n    };\n  },\n  methods: {\n    sendMessage() {\n      if (this.userInput.trim() === \"\") {\n        return; // 用户输入为空，不执行任何操作\n      }\n\n      this.messages.push({\n        sender: \"user\",\n        text: this.userInput\n      });\n      this.userInput = \"\";\n      this.$nextTick(() => {\n        // 滚动聊天框到底部\n        const chatContent = this.$el.querySelector(\".chat-content\");\n        chatContent.scrollTop = chatContent.scrollHeight;\n      });\n\n      // TODO: You should send the user's input to your chatbot and append the response to chat history\n    },\n\n    handleEnterKey(event) {\n      if (!event.shiftKey) {\n        event.preventDefault();\n        this.sendMessage();\n      }\n    },\n    handleShiftEnterKey(event) {\n      if (event.shiftKey) {\n        event.preventDefault();\n        this.userInput += \"\\n\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","userInput","isChatOpen","messages","methods","sendMessage","trim","push","sender","text","$nextTick","chatContent","$el","querySelector","scrollTop","scrollHeight","handleEnterKey","event","shiftKey","preventDefault","handleShiftEnterKey"],"sources":["H:\\单词学习项目\\word_study\\src\\components\\ChatBox.vue"],"sourcesContent":["<template>\r\n    <div class=\"chat-box-container\">\r\n      <div v-if=\"isChatOpen\" class=\"chat-box\">\r\n        <div class=\"chat-header\" @click=\"isChatOpen = !isChatOpen\">\r\n          <h3 class=\"header-text\">Word Usage</h3>\r\n        </div>\r\n        <div class=\"chat-content\">\r\n          <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"message\">\r\n            <div v-if=\"message.sender === 'user'\" class=\"user-message\">\r\n              <pre>{{ message.text }}</pre>\r\n            </div>\r\n            <div v-else class=\"bot-message\">\r\n              <pre>{{ message.text }}</pre>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"chat-input\">\r\n          <textarea\r\n            v-model=\"userInput\"\r\n            placeholder=\"Type your message...\"\r\n            @keydown.enter.prevent=\"handleEnterKey\"\r\n            @keydown.enter.shift=\"handleShiftEnterKey\"\r\n          ></textarea>\r\n          <button class=\"send-button\" @click=\"sendMessage\">Send</button>\r\n        </div>\r\n      </div>\r\n      <div v-else class=\"chat-icon\" @click=\"isChatOpen = !isChatOpen\">\r\n        <font-awesome-icon icon=\"comments\" />\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n//   import axios from 'axios';\r\n  export default {\r\n    data() {\r\n      return {\r\n        userInput: \"\",\r\n        isChatOpen: false,\r\n        messages: [],\r\n      };\r\n    },\r\n    methods: {\r\n      sendMessage() {\r\n        if (this.userInput.trim() === \"\") {\r\n          return; // 用户输入为空，不执行任何操作\r\n        }\r\n  \r\n        this.messages.push({ sender: \"user\", text: this.userInput });\r\n        this.userInput = \"\";\r\n  \r\n        this.$nextTick(() => {\r\n          // 滚动聊天框到底部\r\n          const chatContent = this.$el.querySelector(\".chat-content\");\r\n          chatContent.scrollTop = chatContent.scrollHeight;\r\n        });\r\n  \r\n        // TODO: You should send the user's input to your chatbot and append the response to chat history\r\n      },\r\n      handleEnterKey(event) {\r\n        if (!event.shiftKey) {\r\n          event.preventDefault();\r\n          this.sendMessage();\r\n        }\r\n      },\r\n      handleShiftEnterKey(event) {\r\n        if (event.shiftKey) {\r\n          event.preventDefault();\r\n          this.userInput += \"\\n\";\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .chat-box-container {\r\n    position: fixed;\r\n    right: 20px;\r\n    bottom: 20px;\r\n    z-index: 1000;\r\n  }\r\n  \r\n  .chat-box {\r\n    width: 400px;\r\n    height: 300px;\r\n    background-color: #f2f2f2;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n    padding: 10px;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n  }\r\n  \r\n  .chat-header {\r\n    margin-bottom: 10px;\r\n    cursor: pointer;\r\n    background-color: #007bff;\r\n    color: white;\r\n    padding: 5px;\r\n    text-align: center;\r\n  }\r\n  \r\n  .header-text {\r\n    margin: 0;\r\n    font-family: Arial, sans-serif;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .chat-content {\r\n    height: 100%;\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  .message {\r\n    margin-bottom: 10px;\r\n    padding: 5px;\r\n    border-radius: 5px;\r\n  }\r\n  \r\n  .user-message pre,\r\n  .bot-message pre {\r\n    margin: 0;\r\n    white-space: pre-wrap;\r\n    word-wrap: break-word;\r\n    font-family: Arial, sans-serif;\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .user-message {\r\n    background-color: #eaf6ff;\r\n  }\r\n  \r\n  .bot-message {\r\n    background-color: #f2f2f2;\r\n  }\r\n  \r\n  .chat-input {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  \r\n  textarea {\r\n    flex: 1;\r\n    height: 100px;\r\n    width: 280px;\r\n    margin-bottom: 10px;\r\n    resize: none;\r\n    padding: 5px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 3px;\r\n    font-family: Arial, sans-serif;\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .send-button {\r\n    background-color: #007bff;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 3px;\r\n    padding: 8px 15px;\r\n    font-family: Arial, sans-serif;\r\n    font-size: 14px;\r\n    margin-left: 10px;\r\n    cursor: pointer;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .send-button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  \r\n  .chat-icon {\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: #007bff;\r\n    color: white;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .chat-icon:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  \r\n  @media (max-width: 400px) {\r\n    .chat-box {\r\n      width: 90%;\r\n    }\r\n  }\r\n  </style>\r\n  "],"mappings":";AAiCA;AACE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,UAAU,EAAE,KAAK;MACjBC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACJ,SAAS,CAACK,IAAI,CAAC,MAAM,EAAE,EAAE;QAChC,OAAM,CAAE;MACV;;MAEA,IAAI,CAACH,QAAQ,CAACI,IAAI,CAAC;QAAEC,MAAM,EAAE,MAAM;QAAEC,IAAI,EAAE,IAAI,CAACR;MAAU,CAAC,CAAC;MAC5D,IAAI,CAACA,SAAQ,GAAI,EAAE;MAEnB,IAAI,CAACS,SAAS,CAAC,MAAM;QACnB;QACA,MAAMC,WAAU,GAAI,IAAI,CAACC,GAAG,CAACC,aAAa,CAAC,eAAe,CAAC;QAC3DF,WAAW,CAACG,SAAQ,GAAIH,WAAW,CAACI,YAAY;MAClD,CAAC,CAAC;;MAEF;IACF,CAAC;;IACDC,cAAcA,CAACC,KAAK,EAAE;MACpB,IAAI,CAACA,KAAK,CAACC,QAAQ,EAAE;QACnBD,KAAK,CAACE,cAAc,CAAC,CAAC;QACtB,IAAI,CAACd,WAAW,CAAC,CAAC;MACpB;IACF,CAAC;IACDe,mBAAmBA,CAACH,KAAK,EAAE;MACzB,IAAIA,KAAK,CAACC,QAAQ,EAAE;QAClBD,KAAK,CAACE,cAAc,CAAC,CAAC;QACtB,IAAI,CAAClB,SAAQ,IAAK,IAAI;MACxB;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
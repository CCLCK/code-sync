{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ContactUs from \"./components/ContactUs.vue\"; // 确保这里的路径是正确的\n\nexport default {\n  components: {\n    \"contact-us\": ContactUs // 在这里注册你的组件\n  },\n\n  data() {\n    return {\n      words: [{\n        word: \"apple\",\n        definition: \"一种常见的水果\"\n      }, {\n        word: \"banana\",\n        definition: \"一种常见的黄色水果\"\n      }, {\n        word: \"cat\",\n        definition: \"一种家养的小型猫科动物\"\n      }],\n      currentWordIndex: 0,\n      isDefinitionVisible: false,\n      searchTerm: \"\",\n      focusLostCountdown: 0,\n      countdownInterval: null // 新增一个变量来存储倒计时的interval\n    };\n  },\n\n  methods: {\n    showDefinition() {\n      this.isDefinitionVisible = true;\n    },\n    nextWord() {\n      this.currentWordIndex = (this.currentWordIndex + 1) % this.words.length;\n      this.isDefinitionVisible = false;\n    },\n    searchWord() {\n      const index = this.words.findIndex(word => word.word === this.searchTerm);\n      if (index !== -1) {\n        this.currentWordIndex = index;\n        this.isDefinitionVisible = false;\n      } else {\n        alert(\"未找到该单词\");\n      }\n    },\n    startCountdown() {\n      this.focusLostCountdown = 5;\n      this.countdownInterval = setInterval(() => {\n        if (this.focusLostCountdown > 0) {\n          this.focusLostCountdown--;\n        } else {\n          clearInterval(this.countdownInterval);\n        }\n      }, 1000);\n    },\n    stopCountdown() {\n      clearInterval(this.countdownInterval);\n      this.focusLostCountdown = 0;\n    },\n    async sendChatMessage() {\n      // 确保输入不为空\n      if (this.chatInput.trim()) {\n        // 添加用户消息到聊天框\n        this.chatMessages.push({\n          sender: \"user\",\n          text: this.chatInput\n        });\n\n        // 使用OpenAI的API发送聊天消息，这里假设您已经设置了一个名为sendToChatbot的方法\n        const response = await this.sendToChatbot(this.chatInput);\n        if (response) {\n          // 添加聊天机器人的回应到聊天框\n          this.chatMessages.push({\n            sender: \"bot\",\n            text: response\n          });\n        }\n\n        // 清空输入框\n        this.chatInput = \"\";\n      }\n    },\n    // 这个方法应该连接到你的聊天机器人API，这里只是一个占位符\n    // 注意，你需要自己实现这个方法\n    async sendToChatbot() {\n      // 发送请求到聊天机器人API，并返回机器人的回应\n    }\n  }\n};","map":{"version":3,"names":["ContactUs","components","data","words","word","definition","currentWordIndex","isDefinitionVisible","searchTerm","focusLostCountdown","countdownInterval","methods","showDefinition","nextWord","length","searchWord","index","findIndex","alert","startCountdown","setInterval","clearInterval","stopCountdown","sendChatMessage","chatInput","trim","chatMessages","push","sender","text","response","sendToChatbot"],"sources":["H:\\单词学习项目\\word_study\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <!-- 添加一个头部 -->\n    <header>\n      <h1>Word Journeyman</h1>\n      <nav>\n        <a href=\"#\">首页</a>\n        <a href=\"#\">关于我们</a>\n        <contact-us></contact-us>\n      </nav>\n    </header>\n\n    <!-- 搜索栏和卡片 -->\n    <div class=\"center-container\">\n      <!-- 搜索栏 -->\n      <div class=\"search-bar\">\n        <input\n          v-model=\"searchTerm\"\n          type=\"text\"\n          placeholder=\"搜索单词...\"\n          @keyup.enter=\"searchWord\"\n        />\n        <button @click=\"searchWord\">搜索</button>\n      </div>\n\n      <!-- 单词卡片 -->\n      <div\n        id=\"card\"\n        class=\"card\"\n        @mouseleave=\"startCountdown\"\n        @mouseenter=\"stopCountdown\"\n      >\n        <!-- 卡片内容 -->\n        <h1>{{ words[currentWordIndex].word }}</h1>\n        <button @click=\"showDefinition\" :disabled=\"isDefinitionVisible\">\n          显示定义\n        </button>\n        <p v-show=\"isDefinitionVisible\">\n          {{ words[currentWordIndex].definition }}\n        </p>\n        <button @click=\"nextWord\">下一个单词</button>\n\n        <!-- 小字提醒 -->\n        <p v-if=\"focusLostCountdown > 0\" class=\"countdown-message\">\n          焦点将在 {{ focusLostCountdown }} 秒后消失\n        </p>\n      </div>\n\n      <!-- <p v-if=\"focusLostCountdown > 0\" class=\"countdown countdown-message\">\n        焦点将在 {{ focusLostCountdown }} 秒后消失\n      </p> -->\n    </div>\n\n    <!-- AI聊天对话框 -->\n    <div class=\"chat-container\">\n      <h2>问问ChatGPT</h2>\n      <div class=\"chat-box\">\n        <div v-for=\"(message, index) in chatMessages\" :key=\"index\">\n          <p :class=\"message.sender\">{{ message.text }}</p>\n        </div>\n      </div>\n      \n      <div class=\"chat-input\">\n        <input\n          v-model=\"chatInput\"\n          type=\"text\"\n          placeholder=\"输入你的问题...\"\n          @keyup.enter=\"sendChatMessage\"\n        />\n        <button @click=\"sendChatMessage\">发送</button>\n      </div>\n    </div>\n\n    <!-- 添加一个底部 -->\n    <footer>\n      <p>©2023 Word Journeyman</p>\n    </footer>\n  </div>\n</template>\n\n<script>\nimport ContactUs from \"./components/ContactUs.vue\"; // 确保这里的路径是正确的\n\nexport default {\n  components: {\n    \"contact-us\": ContactUs, // 在这里注册你的组件\n  },\n  data() {\n    return {\n      words: [\n        { word: \"apple\", definition: \"一种常见的水果\" },\n        { word: \"banana\", definition: \"一种常见的黄色水果\" },\n        { word: \"cat\", definition: \"一种家养的小型猫科动物\" },\n      ],\n      currentWordIndex: 0,\n      isDefinitionVisible: false,\n      searchTerm: \"\",\n      focusLostCountdown: 0,\n      countdownInterval: null, // 新增一个变量来存储倒计时的interval\n    };\n  },\n  methods: {\n    showDefinition() {\n      this.isDefinitionVisible = true;\n    },\n    nextWord() {\n      this.currentWordIndex = (this.currentWordIndex + 1) % this.words.length;\n      this.isDefinitionVisible = false;\n    },\n    searchWord() {\n      const index = this.words.findIndex(\n        (word) => word.word === this.searchTerm\n      );\n      if (index !== -1) {\n        this.currentWordIndex = index;\n        this.isDefinitionVisible = false;\n      } else {\n        alert(\"未找到该单词\");\n      }\n    },\n    startCountdown() {\n      this.focusLostCountdown = 5;\n      this.countdownInterval = setInterval(() => {\n        if (this.focusLostCountdown > 0) {\n          this.focusLostCountdown--;\n        } else {\n          clearInterval(this.countdownInterval);\n        }\n      }, 1000);\n    },\n    stopCountdown() {\n      clearInterval(this.countdownInterval);\n      this.focusLostCountdown = 0;\n    },\n    async sendChatMessage() {\n      // 确保输入不为空\n      if (this.chatInput.trim()) {\n        // 添加用户消息到聊天框\n        this.chatMessages.push({ sender: \"user\", text: this.chatInput });\n\n        // 使用OpenAI的API发送聊天消息，这里假设您已经设置了一个名为sendToChatbot的方法\n        const response = await this.sendToChatbot(this.chatInput);\n        if (response) {\n          // 添加聊天机器人的回应到聊天框\n          this.chatMessages.push({ sender: \"bot\", text: response });\n        }\n\n        // 清空输入框\n        this.chatInput = \"\";\n      }\n    },\n\n    // 这个方法应该连接到你的聊天机器人API，这里只是一个占位符\n    // 注意，你需要自己实现这个方法\n    async sendToChatbot() {\n      // 发送请求到聊天机器人API，并返回机器人的回应\n    },\n  },\n};\n</script>\n\n\n<style scoped>\n@import url(\"../css/styles.css\");\n</style>"],"mappings":";AAiFA,OAAOA,SAAQ,MAAO,4BAA4B,EAAE;;AAEpD,eAAe;EACbC,UAAU,EAAE;IACV,YAAY,EAAED,SAAS,CAAE;EAC3B,CAAC;;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,CACL;QAAEC,IAAI,EAAE,OAAO;QAAEC,UAAU,EAAE;MAAU,CAAC,EACxC;QAAED,IAAI,EAAE,QAAQ;QAAEC,UAAU,EAAE;MAAY,CAAC,EAC3C;QAAED,IAAI,EAAE,KAAK;QAAEC,UAAU,EAAE;MAAc,CAAC,CAC3C;MACDC,gBAAgB,EAAE,CAAC;MACnBC,mBAAmB,EAAE,KAAK;MAC1BC,UAAU,EAAE,EAAE;MACdC,kBAAkB,EAAE,CAAC;MACrBC,iBAAiB,EAAE,IAAI,CAAE;IAC3B,CAAC;EACH,CAAC;;EACDC,OAAO,EAAE;IACPC,cAAcA,CAAA,EAAG;MACf,IAAI,CAACL,mBAAkB,GAAI,IAAI;IACjC,CAAC;IACDM,QAAQA,CAAA,EAAG;MACT,IAAI,CAACP,gBAAe,GAAI,CAAC,IAAI,CAACA,gBAAe,GAAI,CAAC,IAAI,IAAI,CAACH,KAAK,CAACW,MAAM;MACvE,IAAI,CAACP,mBAAkB,GAAI,KAAK;IAClC,CAAC;IACDQ,UAAUA,CAAA,EAAG;MACX,MAAMC,KAAI,GAAI,IAAI,CAACb,KAAK,CAACc,SAAS,CAC/Bb,IAAI,IAAKA,IAAI,CAACA,IAAG,KAAM,IAAI,CAACI,UAC/B,CAAC;MACD,IAAIQ,KAAI,KAAM,CAAC,CAAC,EAAE;QAChB,IAAI,CAACV,gBAAe,GAAIU,KAAK;QAC7B,IAAI,CAACT,mBAAkB,GAAI,KAAK;MAClC,OAAO;QACLW,KAAK,CAAC,QAAQ,CAAC;MACjB;IACF,CAAC;IACDC,cAAcA,CAAA,EAAG;MACf,IAAI,CAACV,kBAAiB,GAAI,CAAC;MAC3B,IAAI,CAACC,iBAAgB,GAAIU,WAAW,CAAC,MAAM;QACzC,IAAI,IAAI,CAACX,kBAAiB,GAAI,CAAC,EAAE;UAC/B,IAAI,CAACA,kBAAkB,EAAE;QAC3B,OAAO;UACLY,aAAa,CAAC,IAAI,CAACX,iBAAiB,CAAC;QACvC;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;IACDY,aAAaA,CAAA,EAAG;MACdD,aAAa,CAAC,IAAI,CAACX,iBAAiB,CAAC;MACrC,IAAI,CAACD,kBAAiB,GAAI,CAAC;IAC7B,CAAC;IACD,MAAMc,eAAeA,CAAA,EAAG;MACtB;MACA,IAAI,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC,EAAE;QACzB;QACA,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAE,MAAM;UAAEC,IAAI,EAAE,IAAI,CAACL;QAAU,CAAC,CAAC;;QAEhE;QACA,MAAMM,QAAO,GAAI,MAAM,IAAI,CAACC,aAAa,CAAC,IAAI,CAACP,SAAS,CAAC;QACzD,IAAIM,QAAQ,EAAE;UACZ;UACA,IAAI,CAACJ,YAAY,CAACC,IAAI,CAAC;YAAEC,MAAM,EAAE,KAAK;YAAEC,IAAI,EAAEC;UAAS,CAAC,CAAC;QAC3D;;QAEA;QACA,IAAI,CAACN,SAAQ,GAAI,EAAE;MACrB;IACF,CAAC;IAED;IACA;IACA,MAAMO,aAAaA,CAAA,EAAG;MACpB;IAAA;EAEJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
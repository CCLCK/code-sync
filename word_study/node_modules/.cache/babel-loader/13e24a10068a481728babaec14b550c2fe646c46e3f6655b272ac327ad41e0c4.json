{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  props: {\n    words: {\n      type: Array,\n      default: () => []\n    },\n    isVisible: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    async addWordToNotebook() {\n      const currentWord = this.words[this.currentWordIndex].word;\n      if (!this.words.includes(currentWord)) {\n        try {\n          // Add word to the backend notebook\n          const userId = localStorage.getItem('user_id');\n          const response = await axios.post('/api/user/add_word', {\n            user_id: userId,\n            word: currentWord\n          });\n          if (response.data.status === 'success') {\n            // If word added successfully to backend, add to the frontend list\n            this.words.push(currentWord);\n          } else {\n            console.error(response.data.message);\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    },\n    async removeWord(word, index) {\n      try {\n        // Remove word from the backend notebook\n        const userId = localStorage.getItem('user_id');\n        const response = await axios.post('/api/user/remove_word', {\n          user_id: userId,\n          word: word\n        });\n        if (response.data.status === 'success') {\n          // If word removed successfully from backend, remove from the frontend list\n          this.words.splice(index, 1);\n        } else {\n          console.error(response.data.message);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    toggleVisibility() {\n      this.$emit(\"toggle-visibility\");\n    }\n  },\n  mounted() {\n    // Load words from backend on component mount\n    this.loadWords();\n  },\n  methods: {\n    async loadWords() {\n      try {\n        const userId = localStorage.getItem('user_id');\n        const response = await axios.get('/api/user/words', {\n          params: {\n            user_id: userId\n          }\n        });\n        if (response.data.status === 'success') {\n          this.words = response.data.words;\n        } else {\n          console.error(response.data.message);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","props","words","type","Array","default","isVisible","Boolean","methods","addWordToNotebook","currentWord","currentWordIndex","word","includes","userId","localStorage","getItem","response","post","user_id","data","status","push","console","error","message","removeWord","index","splice","toggleVisibility","$emit","mounted","loadWords","get","params"],"sources":["H:\\单词学习项目\\word_study\\src\\components\\WordNotebook.vue"],"sourcesContent":["<template>\r\n  <div class=\"word-notebook\" v-if=\"isVisible\">\r\n    <h2>Your Word Notebook</h2>\r\n    <ul>\r\n      <li v-for=\"(word, index) in words\" :key=\"index\">\r\n        {{ word }}\r\n        <button @click=\"removeWord(word, index)\">Remove</button>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  props: {\r\n    words: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    isVisible: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  methods: {\r\n    async addWordToNotebook() {\r\n      const currentWord = this.words[this.currentWordIndex].word;\r\n      if (!this.words.includes(currentWord)) {\r\n        try {\r\n          // Add word to the backend notebook\r\n          const userId = localStorage.getItem('user_id');\r\n          const response = await axios.post('/api/user/add_word', {\r\n            user_id: userId,\r\n            word: currentWord\r\n          });\r\n          if (response.data.status === 'success') {\r\n            // If word added successfully to backend, add to the frontend list\r\n            this.words.push(currentWord);\r\n          } else {\r\n            console.error(response.data.message);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n    },\r\n    async removeWord(word, index) {\r\n      try {\r\n        // Remove word from the backend notebook\r\n        const userId = localStorage.getItem('user_id');\r\n        const response = await axios.post('/api/user/remove_word', {\r\n          user_id: userId,\r\n          word: word\r\n        });\r\n        if (response.data.status === 'success') {\r\n          // If word removed successfully from backend, remove from the frontend list\r\n          this.words.splice(index, 1);\r\n        } else {\r\n          console.error(response.data.message);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    toggleVisibility() {\r\n      this.$emit(\"toggle-visibility\");\r\n    },\r\n  },\r\n  mounted() {\r\n    // Load words from backend on component mount\r\n    this.loadWords();\r\n  },\r\n  methods: {\r\n    async loadWords() {\r\n      try {\r\n        const userId = localStorage.getItem('user_id');\r\n        const response = await axios.get('/api/user/words', {\r\n          params: { user_id: userId }\r\n        });\r\n        if (response.data.status === 'success') {\r\n          this.words = response.data.words;\r\n        } else {\r\n          console.error(response.data.message);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url(\"../../css/notebook.css\");\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
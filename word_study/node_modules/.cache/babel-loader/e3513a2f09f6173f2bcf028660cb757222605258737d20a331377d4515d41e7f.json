{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-77a0acb5\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0,\n  class: \"word-notebook\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Your Word Notebook\", -1 /* HOISTED */));\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $props.isVisible ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.words, (word, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, [_createTextVNode(_toDisplayString(word) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.removeWord(word, index)\n    }, \"Remove\", 8 /* PROPS */, _hoisted_3)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"names":["class","_createElementVNode","$props","isVisible","_createElementBlock","_hoisted_1","_hoisted_2","_Fragment","_renderList","words","word","index","key","onClick","$event","$options","removeWord","_hoisted_3"],"sources":["D:\\code-sync-master\\word_study\\src\\components\\WordNotebook.vue"],"sourcesContent":["<template>\n  <div class=\"word-notebook\" v-if=\"isVisible\">\n    <h2>Your Word Notebook</h2>\n    <ul>\n      <li v-for=\"(word, index) in words\" :key=\"index\">\n        {{ word }}\n        <button @click=\"removeWord(word, index)\">Remove</button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  props: {\n    words: {\n      type: Array,\n      default: () => [],\n    },\n    isVisible: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n  \n  },\n  methods: {\n    async removeWord(word, index) {\n  try {\n    // Remove word from the backend notebook\n    const userId = localStorage.getItem('user_id');\n    const response = await axios.post('http://localhost:5500/api/user/remove_word', {\n      user_id: userId,\n      word: word\n    });\n    if (response.data.status === 'success') {\n      // If word removed successfully from backend, remove from the frontend list\n      let newWords = [...this.words]; // 创建words数组的副本\n      newWords.splice(index, 1); // 在副本上进行修改\n      this.$emit('updateWords', newWords); // 发送更新事件，带上新的数组\n    } else {\n      console.error(response.data.message);\n    }\n  } catch (error) {\n    console.error(error);\n  }\n},\n\n    toggleVisibility() {\n      this.$emit(\"toggle-visibility\");\n    },\n\n  },\n\n};\n</script>\n\n<style scoped>\n@import url(\"../../css/notebook.css\");\n</style>\n"],"mappings":";;;;EACOA,KAAK,EAAC;;gEACTC,mBAAA,CAA2B,YAAvB,oBAAkB;;;SADSC,MAAA,CAAAC,SAAS,I,cAA1CC,mBAAA,CAQM,OARNC,UAQM,GAPJC,UAA2B,EAC3BL,mBAAA,CAKK,c,kBAJHG,mBAAA,CAGKG,SAAA,QAAAC,WAAA,CAHuBN,MAAA,CAAAO,KAAK,GAArBC,IAAI,EAAEC,KAAK;yBAAvBP,mBAAA,CAGK;MAH+BQ,GAAG,EAAED;IAAK,I,kCACzCD,IAAI,IAAG,GACV,iBAAAT,mBAAA,CAAwD;MAA/CY,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,UAAU,CAACN,IAAI,EAAEC,KAAK;OAAG,QAAM,iBAAAM,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}
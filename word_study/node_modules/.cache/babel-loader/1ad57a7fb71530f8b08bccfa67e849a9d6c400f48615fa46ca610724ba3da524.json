{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport UserActions from './components/UserActions.vue';\nimport ContactUs from \"./components/ContactUs.vue\"; // 确保这里的路径是正确的\nimport ChatBox from \"./components/ChatBox.vue\"; // 引入你的聊天框组件\nimport RefreshButton from \"./components/RefreshButton.vue\";\nimport axios from \"axios\";\nimport WordCard from \"./components/WordCard.vue\";\nimport WordNotebook from \"./components/WordNotebook.vue\";\nexport default {\n  components: {\n    \"contact-us\": ContactUs,\n    // 在这里注册你的组件\n    \"chat-box\": ChatBox,\n    // 注册你的聊天框组件\n    RefreshButton,\n    WordCard,\n    WordNotebook,\n    \"user-actions\": UserActions\n  },\n  data() {\n    return {\n      words: [],\n      currentWordIndex: 0,\n      isDefinitionVisible: false,\n      searchTerm: \"\",\n      focusLostCountdown: 0,\n      countdownInterval: null,\n      // 新增一个变量来存储倒计时的interval\n      browsedWords: [],\n      // 新增一个变量来存储已浏览的单词\n      newWords: [],\n      // 新的一组单词\n      isNotebookVisible: false,\n      notebookWords: [] // 生词本中的单词\n    };\n  },\n\n  created() {\n    const word = this.$route.params.word;\n    if (word) {\n      this.jumpToWord(word);\n    }\n    axios.get(\"http://localhost:5700/random-words\").then(response => {\n      this.words = response.data;\n    }).catch(error => {\n      console.error(\"Error fetching random words:\", error);\n    });\n  },\n  methods: {\n    updateWords(newWords) {\n      this.notebookWords = newWords;\n    },\n    async toggleNotebookVisibility() {\n      this.isNotebookVisible = !this.isNotebookVisible;\n      try {\n        console.log('111');\n        const userId = localStorage.getItem('user_id');\n        const response = await axios.get('http://localhost:5500/api/user/words', {\n          params: {\n            user_id: userId\n          }\n        });\n        if (response.data.status === 'success') {\n          this.notebookWords = response.data.words;\n        } else {\n          console.error(response.data.message);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    removeWordFromNotebook(index) {\n      this.notebookWords.splice(index, 1);\n    },\n    async addWordToNotebook() {\n      const currentWord = this.words[this.currentWordIndex].word;\n      if (!this.notebookWords.includes(currentWord)) {\n        // 如果当前单词不在生词本中，就添加到列表\n        this.notebookWords.push(currentWord);\n        try {\n          // 向后端发送添加生词的请求\n          const userId = localStorage.getItem('user_id'); // 获取存储在localStorage中的用户ID\n          const response = await axios.post('http://localhost:5500/api/user/add_word', {\n            user_id: userId,\n            word: currentWord\n          });\n          if (response.data.status !== 'success') {\n            // 如果后端返回的状态不是'success'，则将单词从生词本中移除，并打印错误消息\n            const index = this.notebookWords.indexOf(currentWord);\n            if (index > -1) {\n              this.notebookWords.splice(index, 1);\n            }\n            console.error(response.data.message);\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    },\n    showDefinition() {\n      this.isDefinitionVisible = true;\n    },\n    fetchWord(word, showDefinitionImmediately = false) {\n      axios.get(`http://localhost:5100/words/${word}`).then(response => {\n        console.log(response.data);\n        const index = this.words.findIndex(w => w.word === word);\n        if (index >= 0) {\n          this.words[index].definition = response.data.definition;\n          this.words[index].example = response.data.example;\n          this.words[index].example_translation = response.data.example_translation; // 新增的例句翻译\n\n          this.currentWordIndex = index;\n        } else {\n          this.words.push({\n            word: response.data.word,\n            definition: response.data.definition,\n            example: response.data.example,\n            example_translation: response.data.example_translation // 新增的例句翻译\n          });\n\n          this.currentWordIndex = this.words.length - 1;\n        }\n\n        // console.log(this.words[index].word);\n        // console.log(response.data.word);\n        console.log(response.data);\n        console.log(showDefinitionImmediately);\n        // Only show definition if we got a valid response and we should show definition immediately.\n        if (response.data && response.data.word && showDefinitionImmediately) {\n          this.showDefinition(); // 显示搜索到的单词定义\n        }\n      }).catch(error => {\n        console.error(\"Error fetching word:\", error);\n      });\n    },\n    searchWord() {\n      this.fetchWord(this.searchTerm, true); // Search should show definition immediately\n    },\n\n    nextWord() {\n      const currentWord = this.words[this.currentWordIndex].word;\n      if (!this.browsedWords.includes(currentWord)) {\n        // 如果当前单词不在已浏览单词列表中，就添加到列表\n        this.browsedWords.push(currentWord);\n      }\n      this.currentWordIndex = (this.currentWordIndex + 1) % this.words.length;\n      this.isDefinitionVisible = false;\n      this.$router.push(`/words/${this.words[this.currentWordIndex].word}`);\n      this.fetchWord(this.words[this.currentWordIndex].word); // 'Next' should not show definition immediately\n    },\n\n    // ...\n\n    jumpToWord(word) {\n      const index = this.words.findIndex(w => w.word === word);\n      if (index !== -1) {\n        this.currentWordIndex = index;\n      }\n      this.$router.push(`/words/${word}`);\n      this.fetchWord(word);\n    },\n    startCountdown() {\n      this.focusLostCountdown = 5;\n      this.countdownInterval = setInterval(() => {\n        if (this.focusLostCountdown > 0) {\n          this.focusLostCountdown--;\n        } else {\n          clearInterval(this.countdownInterval);\n        }\n      }, 1000);\n    },\n    stopCountdown() {\n      clearInterval(this.countdownInterval);\n      this.focusLostCountdown = 0;\n    },\n    getNewWords() {\n      this.words = []; // 清空单词列表\n      axios.get(\"http://localhost:5700/random-words\").then(response => {\n        this.newWords = response.data;\n        this.words = this.newWords; // 更新单词列表\n      }).catch(error => {\n        console.error(\"Error fetching new words:\", error);\n      });\n    }\n  }\n};\nwindow.addEventListener('beforeunload', function () {\n  localStorage.clear();\n});","map":{"version":3,"names":["UserActions","ContactUs","ChatBox","RefreshButton","axios","WordCard","WordNotebook","components","data","words","currentWordIndex","isDefinitionVisible","searchTerm","focusLostCountdown","countdownInterval","browsedWords","newWords","isNotebookVisible","notebookWords","created","word","$route","params","jumpToWord","get","then","response","catch","error","console","methods","updateWords","toggleNotebookVisibility","log","userId","localStorage","getItem","user_id","status","message","removeWordFromNotebook","index","splice","addWordToNotebook","currentWord","includes","push","post","indexOf","showDefinition","fetchWord","showDefinitionImmediately","findIndex","w","definition","example","example_translation","length","searchWord","nextWord","$router","startCountdown","setInterval","clearInterval","stopCountdown","getNewWords","window","addEventListener","clear"],"sources":["D:\\code-sync-master\\word_study\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <!-- 添加一个头部 -->\n    <header>\n      <h1>Word Journeyman</h1>\n      <div class=\"user-actions-container\">\n        <user-actions></user-actions> <!-- 放在容器内 -->\n      </div>\n      <nav>\n        <a href=\"#\"></a>\n        <contact-us></contact-us>\n      </nav>\n    </header>\n\n    <!-- 添加侧边栏 -->\n    <div class=\"sidebar\">\n      <h2>单词探索历程</h2>\n      <ul>\n        <li v-for=\"word in browsedWords\" :key=\"word\" @click=\"jumpToWord(word)\">\n          {{ word }}\n        </li>\n      </ul>\n    </div>\n\n    <div class=\"center-container\">\n      <!-- 搜索栏 -->\n      <div class=\"search-bar\">\n        <input\n          v-model=\"searchTerm\"\n          type=\"text\"\n          placeholder=\"搜索单词...\"\n          @keyup.enter=\"searchWord\"\n        />\n        <button @click=\"searchWord\">搜索</button>\n        <p>{{ searchMessage }}</p>\n        <!-- 新增一行来显示searchMessage -->\n      </div>\n      <word-card\n  v-if=\"words.length > 0\"\n  :word=\"words[currentWordIndex]\"\n  :isDefinitionVisible=\"isDefinitionVisible\"\n  :showDefinition=\"showDefinition\"\n  :nextWord=\"nextWord\"\n  :startCountdown=\"startCountdown\"\n  :stopCountdown=\"stopCountdown\"\n  :focusLostCountdown=\"focusLostCountdown\"\n  @add-word-to-notebook=\"addWordToNotebook\"\n>\n</word-card>\n\n<div v-else class=\"loading-wrap\" >\n  <div class=\"balls\">\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n</div>\n\n\n  <refresh-button\n        class=\"refresh-button\"\n        @refresh=\"getNewWords\"\n      ></refresh-button>\n\n\n      \n      \n      <!-- 聊天框组件 -->\n      <chat-box></chat-box>\n\n      <button class=\"sidebar-button\" @click=\"toggleNotebookVisibility\">Toggle Word Notebook</button>\n      <word-notebook\n      :words=\"notebookWords\"\n      :isVisible=\"isNotebookVisible\"\n      @remove-word=\"removeWordFromNotebook\"\n      @toggle-visibility=\"toggleNotebookVisibility\"\n      @updateWords=\"updateWords\"\n    ></word-notebook>\n    </div>\n\n    <!-- 添加一个底部 -->\n    <footer>\n      <p>©2023 Word Journeyman</p>\n    </footer>\n  </div>\n</template>\n\n\n<script>\nimport UserActions from './components/UserActions.vue'\nimport ContactUs from \"./components/ContactUs.vue\"; // 确保这里的路径是正确的\nimport ChatBox from \"./components/ChatBox.vue\"; // 引入你的聊天框组件\nimport RefreshButton from \"./components/RefreshButton.vue\";\nimport axios from \"axios\";\nimport WordCard from \"./components/WordCard.vue\";\nimport WordNotebook from \"./components/WordNotebook.vue\";\nexport default {\n  components: {\n    \"contact-us\": ContactUs, // 在这里注册你的组件\n    \"chat-box\": ChatBox, // 注册你的聊天框组件\n    RefreshButton,\n    WordCard,\n    WordNotebook,\n    \"user-actions\":UserActions\n  },\n  data() {\n    return {\n      words: [],\n      currentWordIndex: 0,\n      isDefinitionVisible: false,\n      searchTerm: \"\",\n      focusLostCountdown: 0,\n      countdownInterval: null, // 新增一个变量来存储倒计时的interval\n      browsedWords: [], // 新增一个变量来存储已浏览的单词\n      newWords: [], // 新的一组单词\n      isNotebookVisible: false,\n      notebookWords: [], // 生词本中的单词\n     \n     \n    };\n  },\n  created() {\n    const word = this.$route.params.word;\n    if (word) {\n      this.jumpToWord(word);\n    }\n    axios\n      .get(\"http://localhost:5700/random-words\")\n      .then((response) => {\n        this.words = response.data;\n        \n      })\n      .catch((error) => {\n        console.error(\"Error fetching random words:\", error);\n       \n      });\n  },\n  methods: {\n    \n    updateWords(newWords) {\n    this.notebookWords = newWords;\n  },\n    async toggleNotebookVisibility() {\n      this.isNotebookVisible = !this.isNotebookVisible;\n      try {\n        console.log('111');\n        const userId = localStorage.getItem('user_id');\n        const response = await axios.get('http://localhost:5500/api/user/words', {\n          params: { user_id: userId }\n        });\n        if (response.data.status === 'success') {\n          this.notebookWords = response.data.words;\n        } else {\n          console.error(response.data.message);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    \n    removeWordFromNotebook(index) {\n  this.notebookWords.splice(index, 1);\n},\n\nasync addWordToNotebook() {\n\tconst currentWord = this.words[this.currentWordIndex].word;\n\tif (!this.notebookWords.includes(currentWord)) {\n\t\t// 如果当前单词不在生词本中，就添加到列表\n\t\tthis.notebookWords.push(currentWord);\n\n\t\ttry {\n\t\t\t// 向后端发送添加生词的请求\n\t\t\tconst userId = localStorage.getItem('user_id'); // 获取存储在localStorage中的用户ID\n\t\t\tconst response = await axios.post('http://localhost:5500/api/user/add_word', {\n\t\t\t\tuser_id: userId,\n\t\t\t\tword: currentWord\n\t\t\t});\n\n\t\t\tif (response.data.status !== 'success') {\n\t\t\t\t// 如果后端返回的状态不是'success'，则将单词从生词本中移除，并打印错误消息\n\t\t\t\tconst index = this.notebookWords.indexOf(currentWord);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tthis.notebookWords.splice(index, 1);\n\t\t\t\t}\n\t\t\t\tconsole.error(response.data.message);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n},\n\n\n    showDefinition() {\n      this.isDefinitionVisible = true;\n    },\n    fetchWord(word, showDefinitionImmediately = false) {\n      axios\n        .get(`http://localhost:5100/words/${word}`)\n        .then((response) => {\n          console.log(response.data);\n          const index = this.words.findIndex((w) => w.word === word);\n          if (index >= 0) {\n            this.words[index].definition = response.data.definition;\n            this.words[index].example = response.data.example;\n            this.words[index].example_translation =\n              response.data.example_translation; // 新增的例句翻译\n\n            this.currentWordIndex = index;\n          } else {\n            this.words.push({\n              word: response.data.word,\n              definition: response.data.definition,\n              example: response.data.example,\n              example_translation: response.data.example_translation, // 新增的例句翻译\n            });\n            this.currentWordIndex = this.words.length - 1;\n          }\n\n          // console.log(this.words[index].word);\n          // console.log(response.data.word);\n          console.log(response.data);\n          console.log(showDefinitionImmediately);\n          // Only show definition if we got a valid response and we should show definition immediately.\n          if (\n            response.data &&\n            response.data.word &&\n            showDefinitionImmediately\n          ) {\n            this.showDefinition(); // 显示搜索到的单词定义\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching word:\", error);\n        });\n    },\n\n    searchWord() {\n      this.fetchWord(this.searchTerm, true); // Search should show definition immediately\n    },\n\n    nextWord() {\n      \n      const currentWord = this.words[this.currentWordIndex].word;\n      if (!this.browsedWords.includes(currentWord)) {\n        // 如果当前单词不在已浏览单词列表中，就添加到列表\n        this.browsedWords.push(currentWord);\n      }\n      this.currentWordIndex = (this.currentWordIndex + 1) % this.words.length;\n      this.isDefinitionVisible = false;\n      this.$router.push(`/words/${this.words[this.currentWordIndex].word}`);\n      this.fetchWord(this.words[this.currentWordIndex].word); // 'Next' should not show definition immediately\n    },\n\n    // ...\n\n    jumpToWord(word) {\n      const index = this.words.findIndex((w) => w.word === word);\n      if (index !== -1) {\n        this.currentWordIndex = index;\n      }\n      this.$router.push(`/words/${word}`);\n      this.fetchWord(word);\n    },\n\n    startCountdown() {\n      this.focusLostCountdown = 5;\n      this.countdownInterval = setInterval(() => {\n        if (this.focusLostCountdown > 0) {\n          this.focusLostCountdown--;\n        } else {\n          clearInterval(this.countdownInterval);\n        }\n      }, 1000);\n    },\n    stopCountdown() {\n      clearInterval(this.countdownInterval);\n      this.focusLostCountdown = 0;\n    },\n\n    getNewWords() {\n     \n      this.words = [];  // 清空单词列表\n      axios\n        .get(\"http://localhost:5700/random-words\")\n        .then((response) => {\n          this.newWords = response.data;\n          this.words = this.newWords; // 更新单词列表\n           \n        })\n        .catch((error) => {\n          console.error(\"Error fetching new words:\", error);\n          \n        });\n    },\n  },\n};\nwindow.addEventListener('beforeunload', function() {\n  localStorage.clear();\n});\n\n</script>\n\n\n<style scoped>\n\n@import url(\"../css/loading.css\");\n@import url(\"../css/styles.css\");\n@import url(\"../css/notebook-button.css\");\n</style>"],"mappings":";AAyFA,OAAOA,WAAU,MAAO,8BAA6B;AACrD,OAAOC,SAAQ,MAAO,4BAA4B,EAAE;AACpD,OAAOC,OAAM,MAAO,0BAA0B,EAAE;AAChD,OAAOC,aAAY,MAAO,gCAAgC;AAC1D,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,QAAO,MAAO,2BAA2B;AAChD,OAAOC,YAAW,MAAO,+BAA+B;AACxD,eAAe;EACbC,UAAU,EAAE;IACV,YAAY,EAAEN,SAAS;IAAE;IACzB,UAAU,EAAEC,OAAO;IAAE;IACrBC,aAAa;IACbE,QAAQ;IACRC,YAAY;IACZ,cAAc,EAACN;EACjB,CAAC;EACDQ,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,gBAAgB,EAAE,CAAC;MACnBC,mBAAmB,EAAE,KAAK;MAC1BC,UAAU,EAAE,EAAE;MACdC,kBAAkB,EAAE,CAAC;MACrBC,iBAAiB,EAAE,IAAI;MAAE;MACzBC,YAAY,EAAE,EAAE;MAAE;MAClBC,QAAQ,EAAE,EAAE;MAAE;MACdC,iBAAiB,EAAE,KAAK;MACxBC,aAAa,EAAE,EAAE,CAAE;IAGrB,CAAC;EACH,CAAC;;EACDC,OAAOA,CAAA,EAAG;IACR,MAAMC,IAAG,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACF,IAAI;IACpC,IAAIA,IAAI,EAAE;MACR,IAAI,CAACG,UAAU,CAACH,IAAI,CAAC;IACvB;IACAhB,KAAI,CACDoB,GAAG,CAAC,oCAAoC,EACxCC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACjB,KAAI,GAAIiB,QAAQ,CAAClB,IAAI;IAE5B,CAAC,EACAmB,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IAEtD,CAAC,CAAC;EACN,CAAC;EACDE,OAAO,EAAE;IAEPC,WAAWA,CAACf,QAAQ,EAAE;MACtB,IAAI,CAACE,aAAY,GAAIF,QAAQ;IAC/B,CAAC;IACC,MAAMgB,wBAAwBA,CAAA,EAAG;MAC/B,IAAI,CAACf,iBAAgB,GAAI,CAAC,IAAI,CAACA,iBAAiB;MAChD,IAAI;QACFY,OAAO,CAACI,GAAG,CAAC,KAAK,CAAC;QAClB,MAAMC,MAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;QAC9C,MAAMV,QAAO,GAAI,MAAMtB,KAAK,CAACoB,GAAG,CAAC,sCAAsC,EAAE;UACvEF,MAAM,EAAE;YAAEe,OAAO,EAAEH;UAAO;QAC5B,CAAC,CAAC;QACF,IAAIR,QAAQ,CAAClB,IAAI,CAAC8B,MAAK,KAAM,SAAS,EAAE;UACtC,IAAI,CAACpB,aAAY,GAAIQ,QAAQ,CAAClB,IAAI,CAACC,KAAK;QAC1C,OAAO;UACLoB,OAAO,CAACD,KAAK,CAACF,QAAQ,CAAClB,IAAI,CAAC+B,OAAO,CAAC;QACtC;MACF,EAAE,OAAOX,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDY,sBAAsBA,CAACC,KAAK,EAAE;MAChC,IAAI,CAACvB,aAAa,CAACwB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IACrC,CAAC;IAED,MAAME,iBAAiBA,CAAA,EAAG;MACzB,MAAMC,WAAU,GAAI,IAAI,CAACnC,KAAK,CAAC,IAAI,CAACC,gBAAgB,CAAC,CAACU,IAAI;MAC1D,IAAI,CAAC,IAAI,CAACF,aAAa,CAAC2B,QAAQ,CAACD,WAAW,CAAC,EAAE;QAC9C;QACA,IAAI,CAAC1B,aAAa,CAAC4B,IAAI,CAACF,WAAW,CAAC;QAEpC,IAAI;UACH;UACA,MAAMV,MAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,EAAE;UAChD,MAAMV,QAAO,GAAI,MAAMtB,KAAK,CAAC2C,IAAI,CAAC,yCAAyC,EAAE;YAC5EV,OAAO,EAAEH,MAAM;YACfd,IAAI,EAAEwB;UACP,CAAC,CAAC;UAEF,IAAIlB,QAAQ,CAAClB,IAAI,CAAC8B,MAAK,KAAM,SAAS,EAAE;YACvC;YACA,MAAMG,KAAI,GAAI,IAAI,CAACvB,aAAa,CAAC8B,OAAO,CAACJ,WAAW,CAAC;YACrD,IAAIH,KAAI,GAAI,CAAC,CAAC,EAAE;cACf,IAAI,CAACvB,aAAa,CAACwB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;YACpC;YACAZ,OAAO,CAACD,KAAK,CAACF,QAAQ,CAAClB,IAAI,CAAC+B,OAAO,CAAC;UACrC;QACD,EAAE,OAAOX,KAAK,EAAE;UACfC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACrB;MACD;IACD,CAAC;IAGGqB,cAAcA,CAAA,EAAG;MACf,IAAI,CAACtC,mBAAkB,GAAI,IAAI;IACjC,CAAC;IACDuC,SAASA,CAAC9B,IAAI,EAAE+B,yBAAwB,GAAI,KAAK,EAAE;MACjD/C,KAAI,CACDoB,GAAG,CAAE,+BAA8BJ,IAAK,EAAC,EACzCK,IAAI,CAAEC,QAAQ,IAAK;QAClBG,OAAO,CAACI,GAAG,CAACP,QAAQ,CAAClB,IAAI,CAAC;QAC1B,MAAMiC,KAAI,GAAI,IAAI,CAAChC,KAAK,CAAC2C,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACjC,IAAG,KAAMA,IAAI,CAAC;QAC1D,IAAIqB,KAAI,IAAK,CAAC,EAAE;UACd,IAAI,CAAChC,KAAK,CAACgC,KAAK,CAAC,CAACa,UAAS,GAAI5B,QAAQ,CAAClB,IAAI,CAAC8C,UAAU;UACvD,IAAI,CAAC7C,KAAK,CAACgC,KAAK,CAAC,CAACc,OAAM,GAAI7B,QAAQ,CAAClB,IAAI,CAAC+C,OAAO;UACjD,IAAI,CAAC9C,KAAK,CAACgC,KAAK,CAAC,CAACe,mBAAkB,GAClC9B,QAAQ,CAAClB,IAAI,CAACgD,mBAAmB,EAAE;;UAErC,IAAI,CAAC9C,gBAAe,GAAI+B,KAAK;QAC/B,OAAO;UACL,IAAI,CAAChC,KAAK,CAACqC,IAAI,CAAC;YACd1B,IAAI,EAAEM,QAAQ,CAAClB,IAAI,CAACY,IAAI;YACxBkC,UAAU,EAAE5B,QAAQ,CAAClB,IAAI,CAAC8C,UAAU;YACpCC,OAAO,EAAE7B,QAAQ,CAAClB,IAAI,CAAC+C,OAAO;YAC9BC,mBAAmB,EAAE9B,QAAQ,CAAClB,IAAI,CAACgD,mBAAmB,CAAE;UAC1D,CAAC,CAAC;;UACF,IAAI,CAAC9C,gBAAe,GAAI,IAAI,CAACD,KAAK,CAACgD,MAAK,GAAI,CAAC;QAC/C;;QAEA;QACA;QACA5B,OAAO,CAACI,GAAG,CAACP,QAAQ,CAAClB,IAAI,CAAC;QAC1BqB,OAAO,CAACI,GAAG,CAACkB,yBAAyB,CAAC;QACtC;QACA,IACEzB,QAAQ,CAAClB,IAAG,IACZkB,QAAQ,CAAClB,IAAI,CAACY,IAAG,IACjB+B,yBAAwB,EACxB;UACA,IAAI,CAACF,cAAc,CAAC,CAAC,EAAE;QACzB;MACF,CAAC,EACAtB,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CAAC;IACN,CAAC;IAED8B,UAAUA,CAAA,EAAG;MACX,IAAI,CAACR,SAAS,CAAC,IAAI,CAACtC,UAAU,EAAE,IAAI,CAAC,EAAE;IACzC,CAAC;;IAED+C,QAAQA,CAAA,EAAG;MAET,MAAMf,WAAU,GAAI,IAAI,CAACnC,KAAK,CAAC,IAAI,CAACC,gBAAgB,CAAC,CAACU,IAAI;MAC1D,IAAI,CAAC,IAAI,CAACL,YAAY,CAAC8B,QAAQ,CAACD,WAAW,CAAC,EAAE;QAC5C;QACA,IAAI,CAAC7B,YAAY,CAAC+B,IAAI,CAACF,WAAW,CAAC;MACrC;MACA,IAAI,CAAClC,gBAAe,GAAI,CAAC,IAAI,CAACA,gBAAe,GAAI,CAAC,IAAI,IAAI,CAACD,KAAK,CAACgD,MAAM;MACvE,IAAI,CAAC9C,mBAAkB,GAAI,KAAK;MAChC,IAAI,CAACiD,OAAO,CAACd,IAAI,CAAE,UAAS,IAAI,CAACrC,KAAK,CAAC,IAAI,CAACC,gBAAgB,CAAC,CAACU,IAAK,EAAC,CAAC;MACrE,IAAI,CAAC8B,SAAS,CAAC,IAAI,CAACzC,KAAK,CAAC,IAAI,CAACC,gBAAgB,CAAC,CAACU,IAAI,CAAC,EAAE;IAC1D,CAAC;;IAED;;IAEAG,UAAUA,CAACH,IAAI,EAAE;MACf,MAAMqB,KAAI,GAAI,IAAI,CAAChC,KAAK,CAAC2C,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACjC,IAAG,KAAMA,IAAI,CAAC;MAC1D,IAAIqB,KAAI,KAAM,CAAC,CAAC,EAAE;QAChB,IAAI,CAAC/B,gBAAe,GAAI+B,KAAK;MAC/B;MACA,IAAI,CAACmB,OAAO,CAACd,IAAI,CAAE,UAAS1B,IAAK,EAAC,CAAC;MACnC,IAAI,CAAC8B,SAAS,CAAC9B,IAAI,CAAC;IACtB,CAAC;IAEDyC,cAAcA,CAAA,EAAG;MACf,IAAI,CAAChD,kBAAiB,GAAI,CAAC;MAC3B,IAAI,CAACC,iBAAgB,GAAIgD,WAAW,CAAC,MAAM;QACzC,IAAI,IAAI,CAACjD,kBAAiB,GAAI,CAAC,EAAE;UAC/B,IAAI,CAACA,kBAAkB,EAAE;QAC3B,OAAO;UACLkD,aAAa,CAAC,IAAI,CAACjD,iBAAiB,CAAC;QACvC;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;IACDkD,aAAaA,CAAA,EAAG;MACdD,aAAa,CAAC,IAAI,CAACjD,iBAAiB,CAAC;MACrC,IAAI,CAACD,kBAAiB,GAAI,CAAC;IAC7B,CAAC;IAEDoD,WAAWA,CAAA,EAAG;MAEZ,IAAI,CAACxD,KAAI,GAAI,EAAE,EAAG;MAClBL,KAAI,CACDoB,GAAG,CAAC,oCAAoC,EACxCC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACV,QAAO,GAAIU,QAAQ,CAAClB,IAAI;QAC7B,IAAI,CAACC,KAAI,GAAI,IAAI,CAACO,QAAQ,EAAE;MAE9B,CAAC,EACAW,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MAEnD,CAAC,CAAC;IACN;EACF;AACF,CAAC;AACDsC,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAE,YAAW;EACjDhC,YAAY,CAACiC,KAAK,CAAC,CAAC;AACtB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}